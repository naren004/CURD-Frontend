@page "/"
@inject CustomerService CustomerService
@inject NavigationManager Navigation
@inject IJSRuntime JS


<h3>Customer List</h3>

<button class="btn btn-success" @onclick="NavigateToAddCustomer">ADD CUSTOMER</button>
<button class="btn btn-primary ms-2" @onclick="LoadCustomers">Refresh List</button>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (customers is null || customers.Count == 0)
{
    <p>No customers found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Actions</th>  @* Added Actions Column *@
                <th>Passwords</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.Id</td>
                    <td>@customer.CustomernName</td>
                    <td>@customer.Email</td> 
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteCustomer(customer.Id)">Delete</button>
                    </td>
                    <td>@customer.password</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CustomerModel> customers = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            isLoading = true;
            customers = await CustomerService.GetCustomersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading customers: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToAddCustomer()
    {
        Navigation.NavigateTo("/add-customer");
    }
    private async Task DeleteCustomer(string customerId)
    {
        if (!string.IsNullOrEmpty(customerId))
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");
            if (confirmed)
            {
                try
                {
                    await CustomerService.DeleteCustomerAsync(customerId); // Call API
                    await LoadCustomers();  // Refresh customer list
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deleting customer: {ex.Message}");
                }
            }
        }
    }
}
